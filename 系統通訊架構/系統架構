### 系統通訊架構

#### 1. 地面站 (Ubuntu 20.04 PC)

- **功能**：
  - 作為操作與監控中心，負責向 ROV 發送控制指令並接收回傳數據。
  - 提供用戶介面（UI）與遠端除錯功能。

- **模組**：
  1. **QGroundControl 或自訂 UI**：
     - 用於控制與監控 ROV 的運行狀態。
     - 支援 Python/C++/ROS2 開發。
  2. **VNC Viewer (可選)**：
     - 遠端桌面工具，用於連接 ROV 的 VNC Server 進行除錯。
  3. **串口監控工具**：
     - 使用 `screen` 或 `minicom` 監控與 Arduino 的串口通訊。

- **通訊方式**：
  - **WiFi/Ethernet**：與 ROV 主控板進行網路通訊。
  - **USB/UART**：與 Arduino 下位機進行串口通訊。

---

#### 2. ROV (Ubuntu 20.04)

- **功能**：
  - 作為水下機器人的主控系統，負責執行自主控制程式並與 Arduino 下位機協同工作。

- **模組**：
  1. **自主控制程式**：
     - 使用 Python/C++/ROS2 開發，實現 ROV 的運動控制與感測器數據處理。
  2. **VNC Server (可選)**：
     - 提供遠端桌面功能，用於地面站的除錯。
  3. **Arduino 串口通信**：
     - 通過 USB/UART 與 Arduino 下位機進行通訊，傳輸控制指令與感測器數據。

---

#### 3. Arduino (下位機)

- **功能**：
  - 作為 ROV 的執行層，負責即時控制與硬體操作。

- **模組**：
  1. **即時控制 (PID)**：
     - 實現推進器的精確控制，確保 ROV 的穩定運行。
  2. **感測器介面**：
     - 與深度傳感器、IMU 等感測器進行數據交互。
  3. **PWM 輸出**：
     - 控制推進器與三軸夾爪的伺服馬達。

---

### 通訊流程

1. **地面站 → ROV**：
   - 地面站通過 WiFi/Ethernet 發送控制指令到 ROV 主控板。
   - 指令包括運動控制、夾爪操作等。

2. **ROV → Arduino**：
   - ROV 主控板通過 USB/UART 將指令傳輸到 Arduino。
   - Arduino 根據指令生成 PWM 信號，控制推進器與夾爪。

3. **Arduino → ROV**：
   - Arduino 收集感測器數據（如深度、IMU），並通過串口回傳給 ROV 主控板。

4. **ROV → 地面站**：
   - ROV 主控板將感測器數據與狀態信息回傳給地面站，用於顯示與監控。

---

### 系統優勢

1. **模組化設計**：
   - 各模組之間通過標準接口連接，方便維護與升級。

2. **高效能**：
   - 使用 Ubuntu 20.04 作為操作系統，支援多種開發工具與通訊協議。

3. **高可靠性**：
   - 使用 WiFi/Ethernet 進行地面站與 ROV 的通訊，確保穩定性。
   - Arduino 下位機負責即時控制，減少延遲。

4. **擴展性**：
   - 支援多種感測器與執行器，適用於不同的應用場景。

---

### 注意事項
1. **網路連接**：
   - 確保 ROV 與地面站之間的網路連接穩定，避免通訊中斷。    